/**
written by phantomx999
 */
public class Main {
    public static void main(String[] args){ 	//test cases below

        //CASE1: empty tree
        System.out.println("First test cases on empty tree: ");
        BinaryTree empty = new BinaryTree();
        empty.printBinaryTree(empty.getRoot(), 0);
        System.out.println("Call toArray() from empty tree: \n ");
        empty.printArray();
        System.out.println("Size of tree: " + empty.size());
        System.out.println("Max Depth: " + empty.depth() + "\n\n\n");
        System.out.println("*******");
        empty.remove(0);
        empty.printArray();
        empty.printBinaryTree(empty.getRoot(), 0);
        System.out.println("Size of tree: " + empty.size());
        System.out.println("Max Depth: " + empty.depth() + "\n\n\n");
      System.out.println("*******");
      System.out.println("test for set");
        empty.set(5,2);
        empty.printArray();
        empty.printBinaryTree(empty.getRoot(), 0);
        System.out.println("*******");
        empty.set(0,1);
        empty.printArray();
        empty.printBinaryTree(empty.getRoot(), 0);
        System.out.println("*******");
        empty.set(1,2);
        empty.printArray();
        System.out.println("*******");

        System.out.println("test for get");
        empty.get(5);
        System.out.println("*******");
        empty.get(0);
        System.out.println("*******");

        empty.printBinaryTree(empty.getRoot(), 0);
        empty.printBinaryTree(empty.getRoot(), 0);

        //CASE 2: only one node in the tree
        System.out.println("\n\n\nNext call a tree with only a getRoot(): ");
        //do test cases for this situation
        BinaryTree tree = new BinaryTree(-3);
        tree.printBinaryTree(tree.getRoot(), 0);
        System.out.println("Size of tree: " + tree.size());
        System.out.println("Max Depth: " + tree.depth() + "\n\n\n");
        System.out.println("Call toArray() from empty tree: \n ");
        tree.printArray();
        System.out.println("Size of tree: " + tree.size());
        System.out.println("Max Depth: " + tree.depth() + "\n\n\n");
        System.out.println("test for set");
        tree.set(5,2);
        tree.printArray();
        tree.printBinaryTree(tree.getRoot(), 0);
                                                                                //The following is ERROR
        System.out.println("*******");
        tree.set(0,1);
        tree.printArray();
        tree.printBinaryTree(tree.getRoot(), 0);
        System.out.println("*******");
        tree.set(1,2);
        tree.printArray();
        System.out.println("*******");

        System.out.println("test for get");
        tree.get(5);
        System.out.println("*******");
        tree.get(0);
        System.out.println("*******");
        tree.printBinaryTree(tree.getRoot(), 0);
        System.out.println("*******");
        tree.remove(1);
        tree.printArray();
        tree.printBinaryTree(tree.getRoot(), 0);
        System.out.println("Size of tree: " + tree.size());
        System.out.println("Max Depth: " + tree.depth() + "\n\n\n");
        System.out.println("*******");
        tree.remove(0);
        tree.printArray();
        tree.printBinaryTree(tree.getRoot(), 0);
        System.out.println("Size of tree: " + tree.size());
        System.out.println("Max Depth: " + tree.depth() + "\n\n\n");
        System.out.println("*******");



        //CASE3: right main branch with left and right subtree branches
        System.out.println("\n\n\n\n\nNext call a tree with only a left branch from the getRoot():");
        TreeNode node2 = new TreeNode(1);
        BinaryTree treeLeft = new BinaryTree(node2);
        treeLeft.add(-1003);
        treeLeft.add(-1002);
        treeLeft.add(-1008);
        treeLeft.add(-102);
        treeLeft.add(-107);
        treeLeft.add(-1);
        treeLeft.add(-9);
        System.out.println("Right side (>)");
        treeLeft.printBinaryTree(treeLeft.getRoot(), 0);
        System.out.println("Left side (<=)");
        System.out.println("\n\nPrint array from tree:");
        treeLeft.printArray();
        System.out.println("\nSize of tree: " + treeLeft.size());
        System.out.println("\nMax Depth: " + treeLeft.depth());
        System.out.println("\nSize of tree: " + treeLeft.size());
        System.out.println("Get -1 index of tree: ");
        treeLeft.get(-1);
        System.out.println("Get 0th index of tree: " + treeLeft.get(0));
        System.out.println("Get 1st index of tree: " + treeLeft.get(1));
        System.out.println("Get 2nd index of tree: " + treeLeft.get(2));
        System.out.println("Get 3rd index of tree: " + treeLeft.get(3));
        System.out.println("Get 4th index of tree: " + treeLeft.get(4));
        System.out.println("Get 5th index of tree: " + treeLeft.get(5));
        System.out.println("Get 6th index of tree: " + treeLeft.get(6));
        System.out.println("Get 7th index of tree: " + treeLeft.get(7));
        System.out.println("Get 8th index of tree: "+treeLeft.get(8));
        System.out.println("Set -1 index to 999: ");
        treeLeft.set(-1, 999);


                                                                              //Then I set all element to be 5 then it has problem
        System.out.println("Set 0th index to 5: ");
        treeLeft.set(0, 5);
        treeLeft.printArray();
        System.out.println("Size:"+treeLeft.size());
        treeLeft.printBinaryTree(treeLeft.getRoot(), 0);
        System.out.println("\n\n\nSet 1st index to 5: ");
        treeLeft.set(1, 5);
        treeLeft.printArray();
        System.out.println("Size:"+treeLeft.size());
        treeLeft.printBinaryTree(treeLeft.getRoot(), 0);
        System.out.println("Set 2nd index to 5: ");
        treeLeft.set(2, 5);
        treeLeft.printArray();
        System.out.println("Size:"+treeLeft.size());
        treeLeft.printBinaryTree(treeLeft.getRoot(), 0);
        System.out.println("Set 3rd index to 5: ");
        treeLeft.set(3,5);
        treeLeft.printArray();
        System.out.println("Size:"+treeLeft.size());
        treeLeft.printBinaryTree(treeLeft.getRoot(), 0);
        System.out.println("Set 4th index to 5: ");
        treeLeft.set(4, 5);
        treeLeft.printArray();
        System.out.println("Size:"+treeLeft.size());
        treeLeft.printBinaryTree(treeLeft.getRoot(), 0);
        System.out.println("Set 5th index to 5: ");
        treeLeft.set(5, 5);
        treeLeft.printArray();
        System.out.println("Size:"+treeLeft.size());
        treeLeft.printBinaryTree(treeLeft.getRoot(), 0);
        System.out.println("Set 6th index to 5: ");
        treeLeft.set(6,5);
        treeLeft.printArray();
        System.out.println("Size:"+treeLeft.size());
        treeLeft.printBinaryTree(treeLeft.getRoot(), 0);
        System.out.println("Set 7th index to 5: ");
        treeLeft.set(7, 5);
        treeLeft.printArray();
        treeLeft.printBinaryTree(treeLeft.getRoot(), 0);
        System.out.println("Set 8th index to 5: ");
        treeLeft.set(8, 5);
        treeLeft.printArray();
        treeLeft.printBinaryTree(treeLeft.getRoot(), 0);
        System.out.println("Set 9th index to 5: ");
        treeLeft.set(9, 5);
        treeLeft.printArray();
        treeLeft.printBinaryTree(treeLeft.getRoot(), 0);
        System.out.println("\nSize of tree: " + treeLeft.size());
        System.out.println("MaxDepth " + treeLeft.depth());
        System.out.println("Test for get" );
        System.out.println("Get 0th index of tree: " + treeLeft.get(0));
        System.out.println("Get 1st index of tree: " + treeLeft.get(1));
        System.out.println("Get 2nd index of tree: " + treeLeft.get(2));
        System.out.println("Get 3rd index of tree: " + treeLeft.get(3));
        System.out.println("Get 4th index of tree: " + treeLeft.get(4));
        System.out.println("Get 5th index of tree: " + treeLeft.get(5));
        System.out.println("Get 6th index of tree: " + treeLeft.get(6));
        System.out.println("Get 7th index of tree: " + treeLeft.get(7));
        System.out.println("Get 8th index of tree: "+treeLeft.get(8));
        System.out.println("test for remove and depth");
        treeLeft.printBinaryTree(treeLeft.getRoot(), 0);
        System.out.println("*******");
        treeLeft.remove(-1);
        treeLeft.printArray();
        System.out.println("size" + treeLeft.size());
        treeLeft.printBinaryTree(treeLeft.getRoot(), 0);
        System.out.println("*******");
        treeLeft.remove(8);
        treeLeft.printArray();
        System.out.println("size" + treeLeft.size());
        treeLeft.printBinaryTree(treeLeft.getRoot(), 0);
        System.out.println("*******");
        treeLeft.remove(1);
        treeLeft.printArray();
        treeLeft.printBinaryTree(treeLeft.getRoot(), 0);
        System.out.println("size" + treeLeft.size());
        System.out.println("*******");
        treeLeft.remove(5);
        treeLeft.printArray();
        treeLeft.printBinaryTree(treeLeft.getRoot(), 0);
        System.out.println("size" + treeLeft.size());
        System.out.println("*******");
        treeLeft.remove(3);
        treeLeft.printArray();
        treeLeft.printBinaryTree(treeLeft.getRoot(), 0);
        System.out.println("size" + treeLeft.size());
        System.out.println("*******");
        treeLeft.remove(2);
        treeLeft.printArray();
        treeLeft.printBinaryTree(treeLeft.getRoot(), 0);
        System.out.println("size" + treeLeft.size());
        System.out.println("*******");
        treeLeft.remove(2);
        treeLeft.printArray();
        treeLeft.printBinaryTree(treeLeft.getRoot(), 0);
        System.out.println("size" + treeLeft.size());
        System.out.println("*******");
        treeLeft.remove(2);
        treeLeft.printArray();
        treeLeft.printBinaryTree(treeLeft.getRoot(), 0);
        System.out.println("size" + treeLeft.size());
        System.out.println("*******");
        treeLeft.remove(0);
        treeLeft.printArray();
        treeLeft.printBinaryTree(treeLeft.getRoot(), 0);
        System.out.println("size" + treeLeft.size());
        System.out.println("*******");
        treeLeft.remove(0);
        treeLeft.printArray();
        treeLeft.printBinaryTree(treeLeft.getRoot(), 0);
        System.out.println("size" + treeLeft.size());
        System.out.println("*******");

        System.out.println("Test for get" );
        System.out.println("Get 0th index of tree: " + treeLeft.get(0));
        System.out.println("Get 1st index of tree: " + treeLeft.get(1));
        System.out.println("Get 2nd index of tree: " + treeLeft.get(2));
        System.out.println("Get 3rd index of tree: " + treeLeft.get(3));
        System.out.println("Get 4th index of tree: " + treeLeft.get(4));
        System.out.println("Get 5th index of tree: " + treeLeft.get(5));
        System.out.println("Get 6th index of tree: " + treeLeft.get(6));
        System.out.println("Get 7th index of tree: " + treeLeft.get(7));
        System.out.println("Get 8th index of tree: "+treeLeft.get(8));

        //CASE 4: left main branch with left and right subtree branches
        System.out.println("\n\n\n\n\nNext test left main branch with left and right subtree branches:");
        BinaryTree nodeTest1 = new BinaryTree();
        nodeTest1.add(20);
        nodeTest1.add(120);
        nodeTest1.add(100);
        nodeTest1.add(140);
        nodeTest1.add(130);
        nodeTest1.add(150);
        nodeTest1.add(145);
        nodeTest1.add(160);
        System.out.println("Right side (>)");
        nodeTest1.printBinaryTree(nodeTest1.getRoot(), 0);
        System.out.println("Left side (<=)");
        System.out.println("MaxDepth " + nodeTest1.depth());
        System.out.println("size " + nodeTest1.size());
        System.out.println("\n\n\n\n\n\n");
        nodeTest1.printBinaryTree(nodeTest1.getRoot(), 0);
        System.out.println("size" + nodeTest1.size());
        System.out.println("Get 0th index of tree: " + nodeTest1.get(0));
        System.out.println("Get 1st index of tree: " + nodeTest1.get(1));
        System.out.println("Get 2nd index of tree: " + nodeTest1.get(2));
        System.out.println("Get 3rd index of tree: " + nodeTest1.get(3));
        System.out.println("Get 4th index of tree: " + nodeTest1.get(4));
        System.out.println("Get 5th index of tree: " + nodeTest1.get(5));
        System.out.println("Get 6th index of tree: " + nodeTest1.get(6));
        System.out.println("Get 7th index of tree: " + nodeTest1.get(7));
        System.out.println("Get 8th index of tree: "+nodeTest1.get(8));
        System.out.println("*******");
        nodeTest1.remove(-1);
        nodeTest1.printArray();
        System.out.println("size" + nodeTest1.size());
        nodeTest1.printBinaryTree(nodeTest1.getRoot(), 0);
        System.out.println("*******");
        nodeTest1.remove(8);
        nodeTest1.printArray();
        System.out.println("size" + nodeTest1.size());
        nodeTest1.printBinaryTree(nodeTest1.getRoot(), 0);
        System.out.println("*******");
        nodeTest1.remove(1);
        nodeTest1.printArray();
        nodeTest1.printBinaryTree(nodeTest1.getRoot(), 0);
        System.out.println("size" + nodeTest1.size());
        System.out.println("*******");
        nodeTest1.remove(5);
        nodeTest1.printArray();
        nodeTest1.printBinaryTree(nodeTest1.getRoot(), 0);
        System.out.println("size" + nodeTest1.size());
        System.out.println("*******");
        nodeTest1.remove(3);
        nodeTest1.printArray();
        nodeTest1.printBinaryTree(nodeTest1.getRoot(), 0);
        System.out.println("size" + nodeTest1.size());
        System.out.println("*******");
        nodeTest1.remove(2);
        nodeTest1.printArray();
        nodeTest1.printBinaryTree(nodeTest1.getRoot(), 0);
        System.out.println("size" + nodeTest1.size());
        System.out.println("*******");
        nodeTest1.remove(2);
        nodeTest1.printArray();
        nodeTest1.printBinaryTree(nodeTest1.getRoot(), 0);
        System.out.println("size" + nodeTest1.size());
        System.out.println("*******");
        nodeTest1.remove(2);
        nodeTest1.printArray();
        nodeTest1.printBinaryTree(nodeTest1.getRoot(), 0);
        System.out.println("size" + nodeTest1.size());
        System.out.println("*******");
        nodeTest1.remove(0);
        nodeTest1.printArray();
        nodeTest1.printBinaryTree(nodeTest1.getRoot(), 0);
        System.out.println("size" + nodeTest1.size());
        System.out.println("*******");
        nodeTest1.remove(0);
        nodeTest1.printArray();
        nodeTest1.printBinaryTree(nodeTest1.getRoot(), 0);
        System.out.println("size" + nodeTest1.size());
        System.out.println("Get 0th index of tree: " + nodeTest1.get(0));
        System.out.println("Get 1st index of tree: " + nodeTest1.get(1));
        System.out.println("Get 2nd index of tree: " + nodeTest1.get(2));
        System.out.println("Get 3rd index of tree: " + nodeTest1.get(3));
        System.out.println("Get 4th index of tree: " + nodeTest1.get(4));
        System.out.println("Get 5th index of tree: " + nodeTest1.get(5));
        System.out.println("Get 6th index of tree: " + nodeTest1.get(6));
        System.out.println("Get 7th index of tree: " + nodeTest1.get(7));
        System.out.println("Get 8th index of tree: "+nodeTest1.get(8));

        //CSAE 5: only have left branch or right branch
        System.out.println("\n\n\n\n\nNext test only have left branch or right branch:");
        BinaryTree nodeTest2 = new BinaryTree();
        nodeTest2.add(1);
        nodeTest2.add(2);
        nodeTest2.add(3);
        nodeTest2.add(4);
        nodeTest2.add(5);
        nodeTest2.add(6);
        nodeTest2.add(7);
        nodeTest2.add(8);
        System.out.println("Right side (>)");
        nodeTest2.printBinaryTree(nodeTest2.getRoot(), 0);
        System.out.println("Left side (<=)");
        System.out.println("MaxDepth " + nodeTest2.depth());
        System.out.println("size " + nodeTest2.size());
        System.out.println("\n\n\n\n\n\n");
        nodeTest2.printBinaryTree(nodeTest2.getRoot(), 0);
        System.out.println("size" + nodeTest2.size());
        System.out.println("Get 0th index of tree: " + nodeTest2.get(0));
        System.out.println("Get 1st index of tree: " + nodeTest2.get(1));
        System.out.println("Get 2nd index of tree: " + nodeTest2.get(2));
        System.out.println("Get 3rd index of tree: " + nodeTest2.get(3));
        System.out.println("Get 4th index of tree: " + nodeTest2.get(4));
        System.out.println("Get 5th index of tree: " + nodeTest2.get(5));
        System.out.println("Get 6th index of tree: " + nodeTest2.get(6));
        System.out.println("Get 7th index of tree: " + nodeTest2.get(7));
        System.out.println("Get 8th index of tree: "+nodeTest2.get(8));
        System.out.println("*******");
        System.out.println("Set 0th index to 8: ");
        nodeTest2.set(0, 8);
        nodeTest2.printArray();
        nodeTest2.printBinaryTree(nodeTest2.getRoot(), 0);
        System.out.println("\n\n\nSet 1st index to 7: ");
        nodeTest2.set(1, 7);
        nodeTest2.printArray();
        nodeTest2.printBinaryTree(nodeTest2.getRoot(), 0);
        System.out.println("Set 2nd index to 6: ");
        nodeTest2.set(2, 6);
        nodeTest2.printArray();
        nodeTest2.printBinaryTree(nodeTest2.getRoot(), 0);
        System.out.println("Set 3rd index to 5: ");
        nodeTest2.set(3,5);
        nodeTest2.printArray();
        nodeTest2.printBinaryTree(nodeTest2.getRoot(), 0);
        System.out.println("Set 4th index to 4: ");
        nodeTest2.set(4, 4);
        nodeTest2.printArray();
        nodeTest2.printBinaryTree(nodeTest2.getRoot(), 0);
        System.out.println("Set 5th index to 3: ");
        nodeTest2.set(5, 3);
        nodeTest2.printArray();
        nodeTest2.printBinaryTree(nodeTest2.getRoot(), 0);
        System.out.println("Set 6th index to 2: ");
        nodeTest2.set(6,2);
        nodeTest2.printArray();
        nodeTest2.printBinaryTree(nodeTest2.getRoot(), 0);
        System.out.println("Set 7th index to 1: ");
        nodeTest2.set(7, 1);
        nodeTest2.printArray();
        nodeTest2.printBinaryTree(nodeTest2.getRoot(), 0);
        System.out.println("Set 8th index to 0: ");
        nodeTest2.set(8, 0);
        nodeTest2.printArray();
        nodeTest2.printBinaryTree(nodeTest2.getRoot(), 0);
        System.out.println("Set 9th index to 5: ");
        nodeTest2.set(9, 5);
        nodeTest2.printArray();
        nodeTest2.printBinaryTree(nodeTest2.getRoot(), 0);

        System.out.println("*******");
        nodeTest2.remove(0);
        nodeTest2.printArray();
        System.out.println("size" + nodeTest2.size());
        nodeTest2.printBinaryTree(nodeTest2.getRoot(), 0);
        System.out.println("*******");
        nodeTest2.remove(0);
        nodeTest2.printArray();
        System.out.println("size" + nodeTest2.size());
        nodeTest2.printBinaryTree(nodeTest2.getRoot(), 0);
        System.out.println("*******");
        nodeTest2.remove(0);
        nodeTest2.printArray();
        nodeTest2.printBinaryTree(nodeTest2.getRoot(), 0);
        System.out.println("size" + nodeTest2.size());
        System.out.println("*******");
        nodeTest2.remove(0);
        nodeTest2.printArray();
        nodeTest2.printBinaryTree(nodeTest2.getRoot(), 0);
        System.out.println("size" + nodeTest2.size());
        System.out.println("*******");
        nodeTest2.remove(0);
        nodeTest2.printArray();
        nodeTest2.printBinaryTree(nodeTest2.getRoot(), 0);
        System.out.println("size" + nodeTest2.size());
        System.out.println("*******");
        nodeTest2.remove(0);
        nodeTest2.printArray();
        nodeTest2.printBinaryTree(nodeTest2.getRoot(), 0);
        System.out.println("size" + nodeTest2.size());
        System.out.println("*******");
        nodeTest2.remove(0);
        nodeTest2.printArray();
        nodeTest2.printBinaryTree(nodeTest2.getRoot(), 0);
        System.out.println("size" + nodeTest2.size());
        System.out.println("*******");
        nodeTest2.remove(0);
        nodeTest2.printArray();
        nodeTest2.printBinaryTree(nodeTest2.getRoot(), 0);
        System.out.println("size" + nodeTest2.size());
        System.out.println("*******");
        nodeTest2.remove(0);
        nodeTest2.printArray();
        nodeTest2.printBinaryTree(nodeTest2.getRoot(), 0);
        System.out.println("size" + nodeTest2.size());
        System.out.println("*******");
        nodeTest2.remove(0);
        nodeTest2.printArray();
        nodeTest2.printBinaryTree(nodeTest2.getRoot(), 0);
        System.out.println("size" + nodeTest2.size());
        System.out.println("*******");

        //add new element to become the tree which only has left branch
        nodeTest2.add(8);
        nodeTest2.add(7);
        nodeTest2.add(6);
        nodeTest2.add(5);
        nodeTest2.add(4);
        nodeTest2.add(3);
        nodeTest2.add(2);
        nodeTest2.add(1);
        System.out.println("Right side (>)");
        nodeTest2.printBinaryTree(nodeTest2.getRoot(), 0);
        System.out.println("Left side (<=)");
        System.out.println("MaxDepth " + nodeTest2.depth());
        System.out.println("size " + nodeTest2.size());
        System.out.println("\n\n\n\n\n\n");
        nodeTest2.printBinaryTree(nodeTest2.getRoot(), 0);
        System.out.println("size" + nodeTest2.size());
        System.out.println("Get 0th index of tree: " + nodeTest2.get(0));
        System.out.println("Get 1st index of tree: " + nodeTest2.get(1));
        System.out.println("Get 2nd index of tree: " + nodeTest2.get(2));
        System.out.println("Get 3rd index of tree: " + nodeTest2.get(3));
        System.out.println("Get 4th index of tree: " + nodeTest2.get(4));
        System.out.println("Get 5th index of tree: " + nodeTest2.get(5));
        System.out.println("Get 6th index of tree: " + nodeTest2.get(6));
        System.out.println("Get 7th index of tree: " + nodeTest2.get(7));
        System.out.println("Get 8th index of tree: "+nodeTest2.get(8));






        System.out.println("*******");
        //Test for remove
          System.out.println("Test for remove");

        System.out.println("New, big tree: ");
        int[] bigArray = {56, 22, 687, 2, 45, 18, 48, 100, 5, 3, 10, 2, 23, 8, 0, 98, 81};
        BinaryTree randomTree3 = new BinaryTree();
        randomTree3 = randomTree3.toBalancedBinaryTree(bigArray);
        randomTree3.printBinaryTree(randomTree3.getRoot(), 0);
        System.out.println("Size " + randomTree3.size());
        System.out.println("MaxDepth " + randomTree3.depth());
        System.out.println("*******");
        randomTree3.remove(8);
        randomTree3.printArray();
        randomTree3.printBinaryTree(randomTree3.getRoot(), 0);
        System.out.println("size" + randomTree3.size());
        System.out.println("MaxDepth " + randomTree3.depth());
        System.out.println("*******");
        System.out.println("*******");
        randomTree3.remove(4);
        randomTree3.printArray();
        randomTree3.printBinaryTree(randomTree3.getRoot(), 0);
        System.out.println("size" + randomTree3.size());
        System.out.println("*******");
        System.out.println("MaxDepth " + randomTree3.depth());
        System.out.println("*******");
        randomTree3.remove(10);
        randomTree3.printArray();
        randomTree3.printBinaryTree(randomTree3.getRoot(), 0);
        System.out.println("size" + randomTree3.size());
        System.out.println("MaxDepth " + randomTree3.depth());
        System.out.println("*******");
        System.out.println("*******");
        randomTree3.remove(6);
        randomTree3.printArray();
        randomTree3.printBinaryTree(randomTree3.getRoot(), 0);
        System.out.println("size" + randomTree3.size());
        System.out.println("MaxDepth " + randomTree3.depth());
        System.out.println("*******");
        System.out.println("*******");
        randomTree3.remove(3);
        randomTree3.printArray();
        randomTree3.printBinaryTree(randomTree3.getRoot(), 0);
        System.out.println("size" + randomTree3.size());
        System.out.println("MaxDepth " + randomTree3.depth());
        System.out.println("*******");
        System.out.println("*******");
        randomTree3.remove(2);
        randomTree3.printArray();
        randomTree3.printBinaryTree(randomTree3.getRoot(), 0);
        System.out.println("size" + randomTree3.size());
        System.out.println("MaxDepth " + randomTree3.depth());
        System.out.println("*******");
        System.out.println("*******");
        randomTree3.remove(6);
        randomTree3.printArray();
        randomTree3.printBinaryTree(randomTree3.getRoot(), 0);
        System.out.println("size" + randomTree3.size());
        System.out.println("MaxDepth " + randomTree3.depth());
        System.out.println("*******");
        System.out.println("*******");
        randomTree3.remove(9);
        randomTree3.printArray();
        randomTree3.printBinaryTree(randomTree3.getRoot(), 0);
        System.out.println("size" + randomTree3.size());
        System.out.println("MaxDepth " + randomTree3.depth());
        System.out.println("*******");
        System.out.println("*******");
        randomTree3.remove(4);
        randomTree3.printArray();
        randomTree3.printBinaryTree(randomTree3.getRoot(), 0);
        System.out.println("size" + randomTree3.size());
        System.out.println("MaxDepth " + randomTree3.depth());
        System.out.println("*******");
        System.out.println("*******");
        randomTree3.remove(6);
        randomTree3.printArray();
        randomTree3.printBinaryTree(randomTree3.getRoot(), 0);
        System.out.println("size" + randomTree3.size());
        System.out.println("MaxDepth " + randomTree3.depth());
        System.out.println("*******");

       //TESt for two binary tree method
        System.out.println("test for balancebinarytree and binarytree");
        int a[]={1,1,1};
        BinaryTree balancetree =new BinaryTree();
        balancetree =balancetree.toBalancedBinaryTree(a);
        balancetree.printArray();
        System.out.print("MaxDepth " + balancetree.depth()+"\n");
        balancetree.printBinaryTree(balancetree.getRoot(),0);
        System.out.println("**********");
        int b[]={1};

        BinaryTree balancetree1 =new BinaryTree();
        balancetree1 =balancetree1.toBinaryTree(b);
        balancetree1.printArray();
        System.out.print("MaxDepth " + balancetree1.depth()+"\n");
        balancetree1.printBinaryTree(balancetree1.getRoot(),0);

        System.out.println("**********");
        int c[]={2,3,4,5,6,7,8,9,10};

        BinaryTree balance =new BinaryTree();
        balance =balance.toBinaryTree(c);
        balance.printArray();
        System.out.print("MaxDepth " + balance.depth()+"\n");
        balance.printBinaryTree(balance.getRoot(),0);

        System.out.println("**********");
        int d[]={2,3,4,5,6,7,8,9,10};

        BinaryTree balancetree2 =new BinaryTree();
        balancetree2 =balancetree2.toBalancedBinaryTree(d);
        balancetree2.printArray();
        System.out.print("MaxDepth " + balancetree2.depth()+"\n");
        balancetree2.printBinaryTree(balancetree2.getRoot(),0);

        System.out.println("**********");
        int[] thirdArray = {5, 10, 1, 11, 20, 100, 32, 6, 51, -3};
        BinaryTree randomTree = new BinaryTree();
        randomTree = randomTree.toBalancedBinaryTree(thirdArray);
        randomTree.printBinaryTree(randomTree.getRoot(), 0);
        System.out.println("Size " + randomTree.size());
        System.out.println("MaxDepth " + randomTree.depth());

        System.out.println("**********");
        int[] testArray = {2, 3, 4, 5, 6, 8, 9, 111, 1};
        BinaryTree randomTree2 = new BinaryTree();
        randomTree2 = randomTree2.toBalancedBinaryTree(testArray);
        randomTree2.printBinaryTree(randomTree2.getRoot(), 0);
        System.out.println("Size " + randomTree2.size());
        System.out.println("MaxDepth " + randomTree2.depth());



    }
}
